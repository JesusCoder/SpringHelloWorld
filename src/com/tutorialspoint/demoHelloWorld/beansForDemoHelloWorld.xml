<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- I have another class called "initHelloWorld.java" which has init and 
		destroy methods, so that I could have these properties set for this helloWolrd 
		bean, but since the child bean "helloChina" doesn't have this class and init/destroy 
		methods, Spring won't work if I want to init helloChina bean. -->
	<bean id="helloWorld" class="com.tutorialspoint.demoCommon.HelloWorld"
		 init-method="init" destroy-method="destroy" lazy-init="true">
		<property name="message"
			value="Hello World from Steve Sun's very first own Spring project!" />
	</bean>

	<bean id="helloChina" class="com.tutorialspoint.demoCommon.HelloChina"
		parent="helloWorld" lazy-init="true">
		<property name="message" value="Hello China! It is China this time!" />
	</bean>

	<!-- I added this lazy-init="true" to the following bean, this way, this 
		bean won't be created unless it's been called/requested, cool! This is the 
		so-called lazy initilization. However, without this line: lazy-init="true", 
		the bean will always be created, as the following "dog" bean demos. -->
	<bean id="gospel1" class="com.tutorialspoint.demoCommon.Gospel1" lazy-init="true">
		<property name="Reflection" value="Gospel one is an amazing book!" />
	</bean>
</beans>